{;; key names: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/src/karabiner_configurator/keys_info.clj
 ;; formatter extension https://marketplace.visualstudio.com/items?itemName=betterthantomorrow.calva
 :profiles {:Default {:default    true
                      :sim        200      ;; if keydown event for two different keys are pressed within :sim ms, the keypresses are considered simultaneous
                      :simlayer-threshold 250
                      :delay      150     ;; after :delay ms, the key press is considered to be delayed (TODO WHAT IS THIS??)
                      :alone      250    ;; if keyup event comes within :alone ms from keydown, the key is not just pressed but held
                      :held       250     ;; key is fired twice when :held ms is elapsed (otherwise seen as a hold command) (TODO WHAT IS THIS??)
                      }}

;; goku doc references:
;;s 
;; !  | means mandatory
;; #  | means optional
;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option
;; R  | right_shift
;; P  | caps_lock
;; !! | mandatory command + control + optional + shift (hyper)
;; ## | optional any

;; This is where you define the modifications
 :main [{:des "Dvorak"
         :rules [;; Exclude other layers so it's easy to remap within them.
                 :!spacefn

                 ;; Homerow mods
                 [:##a nil nil {:alone :##a :held :left_control}]
                 [:##s nil nil {:alone :##o :held :left_shift}]
                 [:##d nil nil {:alone :##e :held :left_option}]
                 [:##f nil nil {:alone :##u :held :left_command}]
                 [:##j nil nil {:alone :##h :held :right_command}]
                 [:##k nil nil {:alone :##t :held :right_option}]
                 [:##l nil nil {:alone :##n :held :right_shift}]
                 [:##semicolon :##s]

                 [:##b :##x]
                 [:##backslash :##backslash]
                 [:##c :##j]
                 [:##close_bracket :##equal_sign]
                 [:##comma :##w]
                 [:##e :##period]
                 [:##equal_sign :##close_bracket]
                 [:##g :##i]
                 [:##h :##d]
                 [:##hyphen :##open_bracket]
                 [:##i :##c]
                 [:##m :##m]
                 [:##n :##b]
                 [:##non_us_backslash :##grave_accent_and_tilde]
                 [:##o :##r]
                 [:##open_bracket :##slash]
                 [:##p :##l]
                 [:##period :##v]
                 [:##q :##quote]
                 [:##quote :##hyphen]
                 [:##r :##p]
                 [:##slash :##z]
                 [:##t :##y]
                 [:##u :##g]
                 [:##v :##k]
                 [:##w :##comma]
                 [:##x :##q]
                 [:##y :##f]
                 [:##z :##semicolon]]}
        {:des "SpaceFN Layer"
         :rules [[:##spacebar ["spacefn" 1] [:!symbols :!mouse :!shifted :!system] {:afterup ["spacefn" 0] :alone :spacebar}]
                 :spacefn
                ;; modifiers
                 [:##a :##left_control]
                 [:##s :##left_shift]
                 [:##d :##left_option]
                 [:##f :##left_command]
                ;; cut / copy / paste
                 [:##w :!Cx]
                 [:##e :!Cc]
                 [:##r :!Cv]
                ;; navigation
                 [:##j :left_arrow]
                 [:##k :down_arrow]
                 [:##i :up_arrow]
                 [:##l :right_arrow]
                 [:##m :delete_or_backspace]
                 [:##comma :delete_forward]]}]}